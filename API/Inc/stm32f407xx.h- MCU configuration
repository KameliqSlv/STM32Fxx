#ifndef INC_SSRM32F407XX_H_
#define INC_SSRM32F407XX_H_

#include <stdint.h>

/*
*	Base address of Flash and SRAM
*/
#define FLASH_BASEADDR	0x08000000U
#define SRAM1_BASEADDR	0x20000000U
#define SRAM2_BASEADDR 	0x20001C00U
#define ROM_BASEADDR	0x1FFF0000U
#define SRAM 			SRAM1_BASEADDR


/*
 * 	AHBx and AHPx bus peripheral base address
 */

#define PERIPH_BASE				0x40000000U
#define APB1PERIPH_BASEADDR		PERIPH_BASE
#define APB2PERIPH_BASEADDR		0x40010000U
#define AHB1PERIPH_BASEADDR		0x40020000U
#define AHB2PERIPH_BASEADDR		0x50000000U


/*
 * 	Base address of peripheral which are hanging on AHB1 bus
 * 	TODO: Complete for all other peripheral
 */
#define GPIOA_BASEADDR		AHB1PERIPH_BASEADDR
#define GPIOB_BASEADDR		(GPIOA_BASEADDR + 0x0400)
#define GPIOC_BASEADDR		(GPIOA_BASEADDR + 0x0800)
#define GPIOD_BASEADDR		(GPIOA_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR		(GPIOA_BASEADDR + 0x1000)
#define GPIOF_BASEADDR		(GPIOA_BASEADDR + 0x1400)
#define GPIOG_BASEADDR		(GPIOA_BASEADDR + 0x1800)
#define GPIOH_BASEADDR		(GPIOA_BASEADDR + 0x1C00)
#define GPIOI_BASEADDR		(GPIOA_BASEADDR + 0x2000)
#define RCC_BASEADDR		(GPIOA_BASEADDR + 0X3800)
/*
 * 	Base addresses of peripheral which are hanging APB1
 */
#define I2C1_BASEADDR		(APB1PERIPH_BASEADDR + 0x5400)
#define I2C2_BASEADDR		(APB1PERIPH_BASEADDR + 0x5800)
#define I2C3_BASEADDR		(APB1PERIPH_BASEADDR + 0x5C00)

#define SPI2_BASEADDR		(APB1PERIPH_BASEADDR + 0x3800)
#define SPI3_BASEADDR		(APB1PERIPH_BASEADDR + 0x3C00)

#define USART2_BASEADDR		(APB1PERIPH_BASEADDR + 0x4400)
#define USART3_BASEADDR		(APB1PERIPH_BASEADDR + 0x4800)
#define UART4_BASEADDR		(APB1PERIPH_BASEADDR + 0x4C00)
#define UART5_BASEADDR 		(APB1PERIPH_BASEADDR + 0x5000)

/*
 * 	Base addresses of peripheral which are hanging APB2 bus
 */
#define EXTI_BASEADDR		(APB2PERIPH_BASEADDR + 0x3C00)
#define SPI1_BASEADDR		(APB2PERIPH_BASEADDR + 0x3000)
#define SYSCFG_BASEADDR		(APB2PERIPH_BASEADDR + 0x3800)
#define USART1_BASEADDR		(APB2PERIPH_BASEADDR + 0x1000)
#define USART6_BASEADDR		(APB2PERIPH_BASEADDR + 0x1400)



/****************************peripheral register definition structure**********************************************/

typedef struct{
	volatile uint32_t MODER;						/* GPIO port mode register, 						Address offset 0x00 */
	volatile uint32_t OTYPER;						/* GPIO port output type register, 					Address offset 0x04 */
	volatile uint32_t OSPEEDR;						/* GPIO port output speed register, 				Address offset 0x08 */
	volatile uint32_t PUPDR;						/* GPIO port pull-up/pull-down register,			Address offset 0x0C */
	volatile uint32_t IDR;							/* GPIO port input data register, 					Address offset 0x10 */
	volatile uint32_t ODR;							/* GPIO port output data register, 					Address offset 0x14 */
	volatile uint32_t BSRR;							/* GPIO port bit set/reset register, 				Address offset 0x18 */
	volatile uint32_t LCKR;							/* GPIO port configuration lock register,			Address offset 0x1C */
	volatile uint32_t ALTF[2];						/* ALTG[0] GPIO alternate function low register,	Address offset 0x20 ,
	 	 	 	 	 	 	 	 	 	 	 	 	   ALTG[1] GPIO alternate function high register,	Address offset 0x24 */


}GPIO_RegDef_t;




/****************************peripheral register definition structure for RCC**********************************************/

typedef struct{
	volatile uint32_t CR;					/* RCC clock control register, 										Address offset 0x00*/
	volatile uint32_t PLLCFGR;				/* RCC PLL configuration register,									Address offset 0x04*/
	volatile uint32_t CFGR;					/* RCC clock configuration register, 								Address offset 0x08 */
	volatile uint32_t CIR;					/* RCC clock interrupt register , 		 							Address offset 0xC */
	volatile uint32_t AHB1RSTR;				/* RCC AHB1 peripheral reset register, 								Address offset 0x10 */
	volatile uint32_t AHB2RSTR;				/* RCC AHB2 peripheral reset register , 							Address offset 0x14 */
	volatile uint32_t AHB3RSTR;				/* RCC AHB3 peripheral reset register, 								Address offset 0x18 */
	uint32_t  Reserved0;					/* RESERVED 0x1C */
	volatile uint32_t APB1RSTR;				/* RCC APB1 peripheral reset register, 								Address offset 0x20 */
	volatile uint32_t APB2RSTR;				/* RCC APB2 peripheral reset register , 							Address offset 0x24 */
	uint32_t Reserved1[2];					/* RESERVED 0x28 - 0x2C */
	volatile uint32_t AHB1ENR;				/* RCC AHB1 peripheral clock register, 								Address offset 0x30 */
	volatile uint32_t AHB2ENR;				/* RCC AHB2 peripheral clock enable register, 						Address offset 0x34 */
	volatile uint32_t AHB3ENR;				/* RCC AHB3 peripheral clock enable register, 						Address offset 0x38 */
	uint32_t Reserved2;						/* RESERVED 0x3C */
	volatile uint32_t APB1ENR;				/* RCC APB1 peripheral clock enable register, 						Address offset 0x40 */
	volatile uint32_t APB2ENR;				/* RCC APB2 peripheral clock enable register, 						Address offset 0x44 */
	uint32_t Reserved3[2];					/* RESERVED 0X48 - 0x4C */
	volatile uint32_t AHB1LPENR;			/* RCC AHB1 peripheral clock enable in low power mode register,	Address offset 0x50 */
	volatile uint32_t AHB2LPENR;			/* RCC AHB2 peripheral clock enable in low power mode register, 	Address offset 0x54 */
	volatile uint32_t AHB3LPENR;			/* RCC AHB3 peripheral clock enable in low power mode register, 	Address offset 0x58 */
	uint32_t Reserved4;						/* RESERVED 0x5C */
	volatile uint32_t APB1LPENR;			/* RCC APB1 peripheral clock enable in low power mode register, 	Address offset 0x60 */
	volatile uint32_t APB2LPENR;			/* RCC APB2 peripheral clock enabled in low power mode register, 	Address offset 0x64 */
	uint32_t Reserved5[2];					/* RESERVED 0x68 - 0x6C */
	volatile uint32_t RCC_BDCR;				/* RCC Backup domain control register, 								Address offset 0x70 */
	volatile uint32_t RCC_CSR;				/* RCC clock control & status register, 							Address offset 0x74 */
	uint32_t Reserved6[2];					/* RESERVED 0x78 - 0x7C */
	volatile uint32_t RCC_SSCGR;			/* RCC spread spectrum clock generation register, 					Address offset 0x80 */
	volatile uint32_t PLLI2SCFGR;			/* RCC PLLI2S configuration register , 								Address offset 0x84 */
	volatile uint32_t PLLSAICFGR;			/* RCC PLL configuration register, 									Address offset 0x88 */
	volatile uint32_t DCKCFGR;				/* RCC Dedicated Clock Configuration Register, 						Address offset 0x8C */

}RCC_RegDef_t;



/*
 * 	peripheral definition (peripheral base addresses typecasted to xxx_RegDef_t
 */
#define GPIOA ((GPIO_RegDef_t*) GPIOA_BASEADDR)
#define GPIOB ((GPIO_RegDef_t*) GPIOB_BASEADDR)
#define GPIOC ((GPIO_RegDef_t*) GPIOC_BASEADDR)
#define GPIOD ((GPIO_RegDef_t*) GPIOD_BASEADDR)
#define GPIOE ((GPIO_RegDef_t*) GPIOE_BASEADDR)
#define GPIOF ((GPIO_RegDef_t*) GPIOF_BASEADDR)
#define GPIOG ((GPIO_RegDef_t*) GPIOG_BASEADDR)
#define GPIOH ((GPIO_RegDef_t*) GPIOH_BASEADDR)
#define GPIOI ((GPIO_RegDef_t*) GPIOI_BASEADDR)

#define RCC ((RCC_RegDef_t*) RCC_BASEADDR)


/*
 * 	Clock enable Macros for GPIOx peripheral
 */
#define PA_PCLK_EN() (RCC -> AHB1ENR |= (1 << 0))				// GPIOA_PERI_CLOCK_ENABLE
#define PB_PCLK_EN() (RCC -> AHB1ENR |= (1 << 1))
#define PC_PCLK_EN() (RCC -> AHB1ENR |= (1 << 2))
#define PD_PCLK_EN() (RCC -> AHB1ENR |= (1 << 3))
#define PE_PCLK_EN() (RCC -> AHB1ENR |= (1 << 4))
#define PF_PCLK_EN() (RCC -> AHB1ENR |= (1 << 5))
#define PG_PCLK_EN() (RCC -> AHB1ENR |= (1 << 6))
#define PH_PCLK_EN() (RCC -> AHB1ENR |= (1 << 7))
#define PI_PCLK_EN() (RCC -> AHB1ENR |= (1 << 8))

/*
 *	Clock enable Macros for I2Cx peripheral
 */
#define I2C1_PCLK_EN () (RCC -> APB1ENR |= (1 << 21))
#define I2C2_PCLK_EN () (RCC -> APB1ENR |= (1 << 22))
#define I2C3_PCLK_EN () (RCC -> APB1ENR |= (1 << 23))

/*
 * 	Clock enable Macros for SPIx peripheral
 */
#define SPI1_PCLK_EN () (RCC -> APB2ENR |= (1 << 12))
#define SPI2_PCLK_EN () (RCC -> APB1ENR |= (1 << 14))
#define SPI3_PCLK_EN () (RCC -> APB1ENR |= (1 << 15))

/*
 * Clock enable Macros for USARTx peripheral
 */
#define USART1_PCLK_EN() (RCC -> APB2ENR |= (1 << 4))
#define USART2_PCLK_EN() (RCC -> APB1ENR |= (1 << 17))
#define USART3_PCLK_EN() (RCC -> APB1ENR |= (1 << 18))
#define UART4_PCLK_EN()	(RCC -> APB1ENR |= (1 << 19))
#define UART5_PCLK_EN()	(RCC -> APB1ENR |= (1 << 20))
#define USART6_PCLK_EN()	(RCC -> APB2ENR |= (1 << 5))

/*
 * Clock enable Macros for SYSCFG peripheral
 */
#define SYSCFG_PCLK_EN() (RCC -> APB2ENR |= (1 <<14))


/*
 *  Clock disable Macros for GPIOx peripheral
 */
#define PA_PCLK_DI() (RCC -> AHB1ENR &= ~(1 << 0))
#define PB_PCLK_DI() (RCC -> AHB1ENR &= ~(1 << 1))
#define PC_PCLK_DI() (RCC -> AHB1ENR &= ~(1 << 2))
#define PD_PCLK_DI() (RCC -> AHB1ENR &= ~(1 << 3))
#define PE_PCLK_DI() (RCC -> AHB1ENR &= ~(1 << 4))
#define PF_PCLK_DI() (RCC -> AHB1ENR &= ~(1 << 5))
#define PG_PCLK_DI() (RCC -> AHB1ENR &= ~(1 << 6))
#define PH_PCLK_DI() (RCC -> AHB1ENR &= ~(1 << 7))
#define PI_PCLK_DI() (RCC -> AHB1ENR &= ~(1 << 8))


/*
 * 	Macros to reset GPIOx peripherals
 */
#define GPIOA_REG_RESET() 			do{(RCC -> AHB1RSTR |= (1 << 0)); (RCC -> AHB1RSTR &= ~( 1 << 0 ));}while(0);
#define GPIOB_REG_RESET() 			do{(RCC -> AHB1RSTR |= (1 << 0)); (RCC -> AHB1RSTR &= ~( 1 << 0 ));}while(0);
#define GPIOC_REG_RESET() 			do{(RCC -> AHB1RSTR |= (1 << 0)); (RCC -> AHB1RSTR &= ~( 1 << 0 ));}while(0);
#define GPIOD_REG_RESET() 			do{(RCC -> AHB1RSTR |= (1 << 0)); (RCC -> AHB1RSTR &= ~( 1 << 0 ));}while(0);
#define GPIOE_REG_RESET() 			do{(RCC -> AHB1RSTR |= (1 << 0)); (RCC -> AHB1RSTR &= ~( 1 << 0 ));}while(0);
#define GPIOF_REG_RESET() 			do{(RCC -> AHB1RSTR |= (1 << 0)); (RCC -> AHB1RSTR &= ~( 1 << 0 ));}while(0);
#define GPIOG_REG_RESET() 			do{(RCC -> AHB1RSTR |= (1 << 0)); (RCC -> AHB1RSTR &= ~( 1 << 0 ));}while(0);
#define GPIOH_REG_RESET() 			do{(RCC -> AHB1RSTR |= (1 << 0)); (RCC -> AHB1RSTR &= ~( 1 << 0 ));}while(0);
#define GPIOI_REG_RESET() 			do{(RCC -> AHB1RSTR |= (1 << 0)); (RCC -> AHB1RSTR &= ~( 1 << 0 ));}while(0);

// some generic macros
#define ENABLE 			1
#define DISABLE 		0
#define SET 			ENABLE
#define RESET 			DISABLE
#define GPIO_PIN_SET	SET
#define GPIO_PIN_RESET	RESET



#include "stm32f407xx_gpio.h"


#endif /* INC_SSRM32F407XX_H_ */
